schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Address
  @join__type(graph: PEOPLE, key: "id")
{
  id: Int!
  detail: String!
  personId: Int!
  city: City!
}

type City
  @join__type(graph: COUNTRY, key: "id")
  @join__type(graph: FOOD, key: "id")
  @join__type(graph: PEOPLE, key: "id")
{
  id: Int!
  name: String! @join__field(graph: COUNTRY)
  touristic: Boolean @join__field(graph: COUNTRY)
  population: Int @join__field(graph: COUNTRY)
  restaurants: [Restaurant!] @join__field(graph: FOOD)
  persons: [Person!] @join__field(graph: PEOPLE)
}

enum Continent
  @join__type(graph: COUNTRY)
{
  Asia
  Europe
  America
  Africa
}

type Country
  @join__type(graph: COUNTRY, key: "id")
{
  id: Int!
  name: String!
  population: Int
  cities: [City!]
  treaties: [Treaty!]
  capital: City!
  continent: Continent
}

input CreateAddressInput
  @join__type(graph: PEOPLE)
{
  detail: String!
  cityId: Int!
}

input CreateCityInput
  @join__type(graph: COUNTRY)
{
  name: String!
  population: Int
  countryId: Int!
}

input CreateCountryInput
  @join__type(graph: COUNTRY)
{
  name: String!
  population: Int
  continent: Continent
}

input CreateHobbyInput
  @join__type(graph: PEOPLE)
{
  name: String!
  difficulty: Difficulty!
  cityId: Int!
}

input CreateMealInput
  @join__type(graph: FOOD)
{
  name: String!
}

input CreatePersonInput
  @join__type(graph: PEOPLE)
{
  firstName: String!
  lastName: String!
  occupation: String!
  address: CreateAddressInput!
}

input CreateRestaurantInput
  @join__type(graph: FOOD)
{
  name: String!
  priceRange: PriceRange!
  cityId: Int!
}

input CreateRightInput
  @join__type(graph: AUTH)
{
  name: String!
  description: String
}

input CreateRoleInput
  @join__type(graph: AUTH)
{
  name: String!
  description: String
}

input CreateTreatyInput
  @join__type(graph: COUNTRY)
{
  name: String!
}

input CreateUserInput
  @join__type(graph: AUTH)
{
  userName: String!
  firstName: String!
  lastName: String!
}

enum Difficulty
  @join__type(graph: PEOPLE)
{
  Easy
  Moderate
  Difficult
}

type Hobby
  @join__type(graph: PEOPLE, key: "id")
{
  id: Int!
  name: String!
  difficulty: Difficulty
  persons: [Person!]
}

scalar join__FieldSet

enum join__Graph {
  AUTH @join__graph(name: "auth", url: "http://localhost:3100/graphql")
  COUNTRY @join__graph(name: "country", url: "http://localhost:3200/graphql")
  FOOD @join__graph(name: "food", url: "http://localhost:3300/graphql")
  PEOPLE @join__graph(name: "people", url: "http://localhost:3400/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Meal
  @join__type(graph: FOOD, key: "id")
{
  id: Int!
  name: String!
  restaurants: [Restaurant!]
}

type Mutation
  @join__type(graph: AUTH)
  @join__type(graph: COUNTRY)
  @join__type(graph: FOOD)
  @join__type(graph: PEOPLE)
{
  createRole(createRoleInput: CreateRoleInput!): Role! @join__field(graph: AUTH)
  updateRole(updateRoleInput: UpdateRoleInput!): Role! @join__field(graph: AUTH)
  removeRole(id: Float!): Int! @join__field(graph: AUTH)
  assignRoleToUser: String! @join__field(graph: AUTH)
  revokeRoleFromUser: String! @join__field(graph: AUTH)
  revokeAllRolesFromUser: String! @join__field(graph: AUTH)
  createRight(createRightInput: CreateRightInput!): Right! @join__field(graph: AUTH)
  updateRight(updateRightInput: UpdateRightInput!): Right! @join__field(graph: AUTH)
  removeRight(id: Float!): Int! @join__field(graph: AUTH)
  assignRightToRole(rightName: String!, roleName: String!): String! @join__field(graph: AUTH)
  revokeRightFromRole(rightName: String!, roleName: String!): String! @join__field(graph: AUTH)
  createUser(createUserInput: CreateUserInput!): User! @join__field(graph: AUTH)
  updateUser(updateUserInput: UpdateUserInput!): User! @join__field(graph: AUTH)
  removeUser(id: Float!): Int! @join__field(graph: AUTH)
  createCountry(input: CreateCountryInput!): Country! @join__field(graph: COUNTRY)
  updateCountry(input: UpdateCountryInput!): Country! @join__field(graph: COUNTRY)
  removeCountry(id: Int!): Int @join__field(graph: COUNTRY)
  addCountryToTreaty(countryId: Int!, treatyId: Int!): Country! @join__field(graph: COUNTRY)
  removeCountryFromTreaty(countryId: Int!, treatyId: Int!): Country! @join__field(graph: COUNTRY)
  createCity(input: CreateCityInput!): City! @join__field(graph: COUNTRY)
  updateCity(input: UpdateCityInput!): City! @join__field(graph: COUNTRY)
  removeCity(id: Int!): Int @join__field(graph: COUNTRY)
  createTreaty(input: CreateTreatyInput!): Treaty! @join__field(graph: COUNTRY)
  updateTreaty(input: UpdateTreatyInput!): Treaty! @join__field(graph: COUNTRY)
  removeTreaty(id: Int!): Treaty! @join__field(graph: COUNTRY)
  createRestaurant(input: CreateRestaurantInput!): Restaurant! @join__field(graph: FOOD)
  updateRestaurant(input: UpdateRestaurantInput!): Restaurant! @join__field(graph: FOOD)
  removeRestaurant(id: Int!): Int @join__field(graph: FOOD)
  createMeal(input: CreateMealInput!): Meal! @join__field(graph: FOOD)
  updateMeal(input: UpdateMealInput!): Meal! @join__field(graph: FOOD)
  removeMeal(id: Int!): Int @join__field(graph: FOOD)
  createHobby(input: CreateHobbyInput!): Hobby! @join__field(graph: PEOPLE)
  removeHobby(id: Int!): Int @join__field(graph: PEOPLE)
  createPerson(input: CreatePersonInput!): Person! @join__field(graph: PEOPLE)
  removePerson(id: Int!): Int @join__field(graph: PEOPLE)
}

type Person
  @join__type(graph: PEOPLE, key: "id")
{
  id: Int!
  firstName: String!
  lastName: String!
  occupation: String!
  addresses: [Address!]
  hobbies: [Hobby!]
}

enum PriceRange
  @join__type(graph: FOOD)
{
  Cheap
  Moderate
  Expensive
  Luxury
}

type Query
  @join__type(graph: AUTH)
  @join__type(graph: COUNTRY)
  @join__type(graph: FOOD)
  @join__type(graph: PEOPLE)
{
  role(id: Float!): Role! @join__field(graph: AUTH)
  roles(name: String): [Role!]! @join__field(graph: AUTH)
  right(id: Float!): Right! @join__field(graph: AUTH)
  rights(name: String): [Right!]! @join__field(graph: AUTH)
  user(username: String!): User! @join__field(graph: AUTH)
  users(userName: String): [User!]! @join__field(graph: AUTH)
  countries: [Country!]! @join__field(graph: COUNTRY)
  findOne(id: Int!): Country! @join__field(graph: COUNTRY)
  cities(name: String): [City!]! @join__field(graph: COUNTRY)
  city(id: Int!): City! @join__field(graph: COUNTRY)
  treaties: [Treaty!]! @join__field(graph: COUNTRY)
  treaty(id: Int!): Treaty! @join__field(graph: COUNTRY)
  restaurants(name: String): [Restaurant!]! @join__field(graph: FOOD)
  restaurant(id: Int!): Restaurant! @join__field(graph: FOOD)
  meals(name: String): [Meal!]! @join__field(graph: FOOD)
  meal(id: Int!): Meal! @join__field(graph: FOOD)
  hobbies(name: String): [Hobby!]! @join__field(graph: PEOPLE)
  hobby(id: Int!): Hobby! @join__field(graph: PEOPLE)
  persons(firstName: String): [Person!]! @join__field(graph: PEOPLE)
  person(id: Int!): Person! @join__field(graph: PEOPLE)
}

type Restaurant
  @join__type(graph: FOOD, key: "id")
{
  id: Int!
  name: String!
  priceRange: PriceRange
  size: Size
  meals: [Meal!]
  cityId: Float!
  city: City!
}

type Right
  @join__type(graph: AUTH)
{
  id: Int!
  name: String!
  description: String!
  roles: [Role!]
}

type Role
  @join__type(graph: AUTH)
{
  id: Int!
  name: String!
  description: String!
  dummy: String!
  rights: [Right!]
  users: [User!]
}

enum Size
  @join__type(graph: FOOD)
{
  Small
  Medium
  Large
}

type Treaty
  @join__type(graph: COUNTRY)
{
  id: Int!
  name: String!
  countries: [Country!]
}

input UpdateCityInput
  @join__type(graph: COUNTRY)
{
  name: String
  population: Int
  countryId: Int
  id: Int!
}

input UpdateCountryInput
  @join__type(graph: COUNTRY)
{
  name: String
  population: Int
  continent: Continent
  id: Int!
}

input UpdateMealInput
  @join__type(graph: FOOD)
{
  name: String
  id: Int!
}

input UpdateRestaurantInput
  @join__type(graph: FOOD)
{
  name: String
  priceRange: PriceRange
  cityId: Int
  id: Int!
}

input UpdateRightInput
  @join__type(graph: AUTH)
{
  name: String
  description: String
  id: Int!
}

input UpdateRoleInput
  @join__type(graph: AUTH)
{
  name: String
  description: String
  id: Int!
}

input UpdateTreatyInput
  @join__type(graph: COUNTRY)
{
  name: String
  id: Int!
}

input UpdateUserInput
  @join__type(graph: AUTH)
{
  userName: String
  firstName: String
  lastName: String
  id: Int!
}

type User
  @join__type(graph: AUTH)
{
  id: Int!
  userName: String!
  firstName: String!
  lastName: String!
  refreshToken: String!
  roles: [Role!]
}