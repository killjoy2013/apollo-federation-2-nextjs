schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
{
  query: Query
  mutation: Mutation
}

extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key", "@shareable", "@external", "@override", "@requires", "@tag", "@inaccessible", "@extends", "@provides"])

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @requires(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @provides(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @external(reason: String) on OBJECT | FIELD_DEFINITION

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @extends on OBJECT | INTERFACE

directive @shareable on OBJECT | FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @override(from: String!) on FIELD_DEFINITION

directive @federation__composeDirective(name: String) repeatable on SCHEMA

type Restaurant
  @key(fields: "id")
{
  id: Int!
  name: String!
  priceRange: PriceRange
  size: Size
  meals: [Meal!]
  cityId: Float!
  city: City!
}

enum PriceRange {
  Cheap
  Moderate
  Expensive
  Luxury
}

enum Size {
  Small
  Medium
  Large
}

type Meal
  @key(fields: "id")
{
  id: Int!
  name: String!
  restaurants: [Restaurant!]
}

type City
  @key(fields: "id")
{
  id: Int!
  restaurants: [Restaurant!]
}

type Query {
  restaurants(name: String): [Restaurant!]!
  restaurant(id: Int!): Restaurant!
  meals(name: String): [Meal!]!
  meal(id: Int!): Meal!
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

type Mutation {
  createRestaurant(input: CreateRestaurantInput!): Restaurant!
  updateRestaurant(input: UpdateRestaurantInput!): Restaurant!
  removeRestaurant(id: Int!): Int
  createMeal(input: CreateMealInput!): Meal!
  updateMeal(input: UpdateMealInput!): Meal!
  removeMeal(id: Int!): Int
}

input CreateRestaurantInput {
  name: String!
  priceRange: PriceRange!
  cityId: Int!
}

input UpdateRestaurantInput {
  name: String
  priceRange: PriceRange
  cityId: Int
  id: Int!
}

input CreateMealInput {
  name: String!
}

input UpdateMealInput {
  name: String
  id: Int!
}

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar link__Import

scalar federation__FieldSet

scalar _Any

type _Service {
  sdl: String
}

union _Entity = City | Meal | Restaurant