"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.newMigration1661891105976 = void 0;
var newMigration1661891105976 = /** @class */ (function () {
    function newMigration1661891105976() {
    }
    newMigration1661891105976.prototype.up = function (queryRunner) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, queryRunner.query("CREATE OR REPLACE FUNCTION auth.sp_assign_right_to_role(right_name character varying, role_name character varying)\n            RETURNS void\n            LANGUAGE plpgsql\n           AS $function$\n                               DECLARE  \n                                   _role_id int;\n                                   _right_id int;\n                                   _role_right_id int;\n                                   _role_count int;\n                                   _right_count int;\n                                   _role_right_count int;    \t     \n                               BEGIN\n                                   SELECT INTO _role_count COUNT(*) FROM auth.\"role\" WHERE \"name\"=role_name;\n                                   SELECT INTO _right_count COUNT(*) FROM auth.\"right\" WHERE \"name\"=right_name;\n                                   RAISE NOTICE 'right_count: %', _right_count;\n                                   RAISE NOTICE 'role_count: %', _role_count;\n                                  \n                                   IF _role_count = 0 THEN\t\n                                       RAISE EXCEPTION 'role_name: % not found', role_name;\n                                       RETURN;\t\n                                   ELSIF _right_count = 0 THEN\t\n                                       RAISE EXCEPTION 'right_name: % not found', right_name;\n                                       RETURN;    \t              \n                                   ELSIF _role_count = 1 AND _right_count = 1 THEN\t\n                                       SELECT INTO _role_id \"id\" FROM auth.\"role\" WHERE \"name\"=role_name;\t\n                                       RAISE NOTICE 'role_id: % ', _role_id;\t\t\n                                       SELECT INTO _right_id \"id\" FROM auth.\"right\" WHERE \"name\"=right_name;\n                                       RAISE NOTICE 'right_id: % ',_right_id;\n                                   ELSE\t\n                                       RAISE EXCEPTION 'undefined situation!';\n                                       RETURN;\n                                   END IF;\t\n                                   SELECT INTO _role_right_count COUNT(*) FROM auth.role_right where role_right.\"role_id\"=_role_id AND role_right.\"right_id\"=_right_id;\n                                                                                   \n                                   RAISE NOTICE 'role_right_count: % ',_role_right_count;    \t                \t\n                                   IF _role_right_count > 0 THEN\t\t\t                \n                                       RETURN;\t\n                                   ELSE\t\n                                       INSERT INTO auth.role_right (role_id, right_id) VALUES(_role_id, _right_id);\n                                       RAISE NOTICE 'Role Right assignment successful ; role_name: % , role_id: % - right_name: % , right_id: % ',role_name, _role_id, right_name, _right_id;\n                                   END IF;\n                               END;\n                               $function$\n           ;\n           \n           \n           \n            CREATE OR REPLACE FUNCTION auth.sp_revoke_right_from_role(right_name character varying, role_name character varying)\n            RETURNS void\n            LANGUAGE plpgsql\n            AS $function$\n                            DECLARE\n                                _role_id int;\n                                _right_id int;\n                                _role_right_id int;\n                                _role_count int;\n                                _right_count int;\n                                _role_right_count int;    \t                \n                            BEGIN\n                                SELECT INTO _role_count COUNT(*) FROM auth.\"role\" WHERE \"name\"=role_name;\n                                SELECT INTO _right_count COUNT(*) FROM auth.\"right\" WHERE \"name\"=right_name;\n                                RAISE NOTICE 'right_count: %',_right_count;\n                                RAISE NOTICE 'role_count: %',_role_count;\n                                        \n                                IF _role_count = 0 THEN\t\n                                    RAISE NOTICE 'role_name: % not found!',_role_name;\n                                    return;\t\n                                ELSIF _right_count = 0 THEN\t\n                                    RAISE NOTICE 'right_name: % not found!',_right_name;\n                                    return;    \t              \n                                ELSIF _role_count > 1 THEN\t\n                                    RAISE NOTICE 'role_name: %, role_count: % birden fazla role!',role_name, _role_count;\n                                    return;\t\n                                ELSIF _right_count > 1 THEN\t\n                                    RAISE NOTICE 'right_name:%, right_count:% birden fazla right!',right_name, _right_count;\n                                    return;\t\n                                ELSIF _role_count = 1 AND _right_count = 1 THEN\t\n                                    SELECT INTO _role_id \"id\" FROM auth.\"role\" WHERE \"name\"=role_name;\t\n                                    RAISE NOTICE 'role_id: % ',_role_id;\n                                    SELECT INTO _right_id \"id\" FROM auth.\"right\" WHERE \"name\"=right_name;\n                                    RAISE NOTICE 'right_id: % ' ,_right_id;\t\t\t\n                                ELSE\t\n                                    RAISE EXCEPTION 'undefined situation!';\n                                    return;\n                                END IF;\t\n                                SELECT INTO _role_right_count COUNT(*) FROM auth.role_right rr WHERE \"role_id\"=_role_id AND \"right_id\"=_right_id;\t\n                                RAISE NOTICE 'role_right_count: %',_role_right_count;\n                                    \n                                IF _role_right_count = 0 THEN\t\n                                    RAISE NOTICE 'Zaten b\u00F6lye bir atama yok!; role_name: % , role_id: % - right_name: % , right_id: %',role_name,role_id,right_name,right_id;\n                                    return;\t\n                                ELSE\n                                    DELETE FROM auth.role_right rr WHERE role_id = _role_id AND right_id = _right_id;\t\t               \n                                    RAISE NOTICE 'Right revoke successful ; role_name: % , role_id: % - right_name: %, right_id: %',role_name,_role_id,right_name,_right_id;\n                                END IF;\n                            END;\n                            $function$\n            ;\n    \n            CREATE OR REPLACE FUNCTION auth.sp_assign_role_to_user(role_name character varying, _user_name character varying)\n            RETURNS void\n            LANGUAGE plpgsql\n            AS $function$\n                            DECLARE  \n                                _role_id int;\n                                _user_id int;\n                                _user_role_id int;\n                                _role_count int;\n                                _user_count int;\n                                _user_role_count int;\n                            BEGIN\n                                SELECT INTO _role_count COUNT(*) FROM auth.\"role\" WHERE \"name\"=role_name;\n                                SELECT INTO _user_count COUNT(*) FROM auth.\"user\" WHERE \"user_name\"=_user_name;\t\n                                RAISE NOTICE 'role_count %',_role_count;\n                                RAISE NOTICE 'user_count %',_user_count;\t\n                                    \n                                IF _role_count = 0 THEN\t\n                                    RAISE EXCEPTION 'role_name: % not found!', role_name;\n                                    RETURN;\n                                ELSIF _user_count = 0 THEN\t\n                                    RAISE EXCEPTION 'user_name: % not found!', _user_name;\n                                    RETURN;\t    \t                \n                                ELSIF _role_count > 1 THEN\n                                    RAISE EXCEPTION 'role_name: %, count: % birden fazla role!',role_name, _role_count;\n                                    RETURN;\n                                ELSIF _user_count > 1 THEN\t\n                                    RAISE EXCEPTION 'user_name: % , count: % more than one username!',_user_name, _user_count;\n                                    RETURN;\n                                ELSIF _role_count = 1 AND _user_count = 1 THEN\t\n                                    SELECT INTO _role_id \"id\" FROM auth.\"role\" r WHERE r.\"name\" =role_name;\t\n                                    RAISE NOTICE 'role_id: %', _role_id;\n                                    SELECT INTO _user_id \"id\" FROM auth.\"user\" u WHERE u.user_name =_user_name;\n                                    RAISE NOTICE 'user_id: %', _user_id;\n                                ELSE\n                                    RAISE EXCEPTION 'undefined situation!';\n                                    RETURN;\n                                END IF;\t\n                                SELECT INTO _user_role_count COUNT(*) FROM auth.user_role ur WHERE ur.role_id=_role_id AND ur.user_id =_user_id;\t\n                                RAISE NOTICE 'user_role_count: %', _user_role_count;\t\t\n                                IF _user_role_count > 0 THEN    \t\t                \n                                    RETURN;\n                                ELSE\n                                    INSERT INTO auth.user_role (role_id , user_id) VALUES(_role_id, _user_id);\n                                    RAISE NOTICE 'User Role assignment successful ; role_name: %, role_id: % - user_name: %', role_name, _role_id, _user_name;\n                                END IF;\t    \n                            END; \n                            $function$\n            ;\n    \n            CREATE OR REPLACE FUNCTION auth.sp_revoke_role_from_user(role_name character varying, _user_name character varying)\n            RETURNS void\n            LANGUAGE plpgsql\n            AS $function$\n                            DECLARE  \n                                _role_id int;\n                                _user_id int;\n                                _user_role_id int;\n                                _role_count int;\n                                _user_count int;\n                                _user_role_count int;    \t                \t\n                            BEGIN\t\n    \n                                SELECT INTO _role_count COUNT(*) FROM auth.\"role\" r where r.name = role_name;\n                                SELECT INTO _user_count COUNT(*) FROM auth.\"user\" u WHERE u.user_name = _user_name;\n    \n                                RAISE NOTICE 'user_count: %',_user_count;\n                                RAISE NOTICE 'role_count: %',_role_count;\n    \n                                IF _role_count = 0 THEN\t\n                                    RAISE NOTICE 'role_name: % not found!',role_name;\n                                    RETURN;\t\n                                ELSIF _user_count = 0 THEN\t\n                                    RAISE NOTICE 'user_name: % not found!',_user_name;\n                                    RETURN;\t\n                                \n                                ELSIF _role_count > 1 THEN\t\n                                    RAISE NOTICE 'role_name: % , role_count: % more than one role!', role_name, _role_count;\n                                    RETURN;\t\n                                ELSIF _user_count > 1 THEN\t\n                                    RAISE NOTICE 'user_name: % , user_count: % more than one username!', _user_name, _user_count;\n                                    RETURN;\t\n                                ELSIF _role_count = 1 AND _user_count = 1 THEN\t\n                                    SELECT INTO _role_id \"id\" FROM auth.\"role\" r WHERE r.\"name\" = role_name;\t\n                                    RAISE NOTICE 'role_id: %',_role_id;\n                                    SELECT INTO _user_id \"id\" FROM auth.\"user\" u WHERE u.user_name = _user_name;\n                                    RAISE NOTICE 'user_id: %',_user_id;\t\t\t\n                                ELSE\t\n                                    RAISE EXCEPTION 'undefined situation!';\n                                    RETURN;\n                                END IF;\n                                SELECT INTO _user_role_count COUNT(*) FROM auth.user_role ur WHERE ur.role_id = _role_id AND ur.user_id = _user_id;\t\n                                RAISE NOTICE 'user_role_count: %',_user_role_count;\t\n                                IF _user_role_count = 0 THEN\t\n                                    RAISE NOTICE 'There is no such assignemt already!; role_name: %, role_id: % - user_name: %, user_id: %',role_name, role_id, _user_name, user_id;\n                                    RETURN;\t\n                                ELSE\n                                    DELETE FROM auth.user_role ur where ur.role_id  = _role_id and ur.user_id = _user_id;\n                                    RAISE NOTICE 'Role revoke successful ; role_name: % , role_id: % - user_name: % , user_id: %', role_name, _role_id, _user_name, _user_id;\n                                END IF;    \n                            END;\n                            $function$\n            ;\n    \n            CREATE OR REPLACE FUNCTION auth.sp_revoke_all_roles_from_user(_user_name character varying)\n            RETURNS void\n            LANGUAGE plpgsql\n            AS $function$                            \n                DECLARE\n                    _user_id int;\n                    _user_count int;  \n                BEGIN                                                 \n                    SELECT INTO _user_count COUNT(*) FROM auth.\"user\" u WHERE u.user_name = _user_name;                       \n                    IF _user_count = 0 THEN\n                        RAISE EXCEPTION 'user_name: % not found', _user_name;\n                        RETURN;\n                    ELSIF _user_count > 1 THEN\n                        RAISE EXCEPTION 'user_name: % , count: % more than one user!', _user_name, _user_count;\n                        RETURN;\n                    ELSIF _user_count = 1 THEN\n                        SELECT INTO _user_id \"id\" FROM auth.\"user\" u WHERE u.user_name = _user_name;\n                        RAISE NOTICE 'user_id: % ', _user_id;                       \n                            delete FROM auth.user_role uro where uro.user_id = _user_id;    \n                    ELSE\n                        RAISE EXCEPTION 'undefined situation!';\n                        RETURN;\n                    END IF;\n                    END;\n                $function$\n            ;")];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    newMigration1661891105976.prototype.down = function (queryRunner) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, queryRunner.query("\n            DROP FUNCTION IF EXISTS auth.sp_assign_right_to_role;\n            DROP FUNCTION IF EXISTS auth.sp_assign_role_to_user;\n            DROP FUNCTION IF EXISTS auth.sp_revoke_right_from_role;\n            DROP FUNCTION IF EXISTS auth.sp_revoke_all_roles_from_user;\n            DROP FUNCTION IF EXISTS auth.sp_revoke_role_from_user;\n            ")];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return newMigration1661891105976;
}());
exports.newMigration1661891105976 = newMigration1661891105976;
